#ifndef REBKEYS_H
#define REBKEYS_H

enum
{
    REB_SCANCODE_UNKNOWN = 0,

    /**
     *  \name Usage page 0x07
     *
     *  These values are from usage page 0x07 (USB keyboard page).
     */
    /*@{*/

    REB_SCANCODE_A = 4,
    REB_SCANCODE_B = 5,
    REB_SCANCODE_C = 6,
    REB_SCANCODE_D = 7,
    REB_SCANCODE_E = 8,
    REB_SCANCODE_F = 9,
    REB_SCANCODE_G = 10,
    REB_SCANCODE_H = 11,
    REB_SCANCODE_I = 12,
    REB_SCANCODE_J = 13,
    REB_SCANCODE_K = 14,
    REB_SCANCODE_L = 15,
    REB_SCANCODE_M = 16,
    REB_SCANCODE_N = 17,
    REB_SCANCODE_O = 18,
    REB_SCANCODE_P = 19,
    REB_SCANCODE_Q = 20,
    REB_SCANCODE_R = 21,
    REB_SCANCODE_S = 22,
    REB_SCANCODE_T = 23,
    REB_SCANCODE_U = 24,
    REB_SCANCODE_V = 25,
    REB_SCANCODE_W = 26,
    REB_SCANCODE_X = 27,
    REB_SCANCODE_Y = 28,
    REB_SCANCODE_Z = 29,

    REB_SCANCODE_1 = 30,
    REB_SCANCODE_2 = 31,
    REB_SCANCODE_3 = 32,
    REB_SCANCODE_4 = 33,
    REB_SCANCODE_5 = 34,
    REB_SCANCODE_6 = 35,
    REB_SCANCODE_7 = 36,
    REB_SCANCODE_8 = 37,
    REB_SCANCODE_9 = 38,
    REB_SCANCODE_0 = 39,

    REB_SCANCODE_RETURN = 40,
    REB_SCANCODE_ESCAPE = 41,
    REB_SCANCODE_BACKSPACE = 42,
    REB_SCANCODE_TAB = 43,
    REB_SCANCODE_SPACE = 44,

    REB_SCANCODE_MINUS = 45,
    REB_SCANCODE_EQUALS = 46,
    REB_SCANCODE_LEFTBRACKET = 47,
    REB_SCANCODE_RIGHTBRACKET = 48,
    REB_SCANCODE_BACKSLASH = 49, /**< Located at the lower left of the return
                                  *   key on ISO keyboards and at the right end
                                  *   of the QWERTY row on ANSI keyboards.
                                  *   Produces REVERSE SOLIDUS (backslash) and
                                  *   VERTICAL LINE in a US layout, REVERSE
                                  *   SOLIDUS and VERTICAL LINE in a UK Mac
                                  *   layout, NUMBER SIGN and TILDE in a UK
                                  *   Windows layout, DOLLAR SIGN and POUND SIGN
                                  *   in a Swiss German layout, NUMBER SIGN and
                                  *   APOSTROPHE in a German layout, GRAVE
                                  *   ACCENT and POUND SIGN in a French Mac
                                  *   layout, and ASTERISK and MICRO SIGN in a
                                  *   French Windows layout.
                                  */
    REB_SCANCODE_NONUSHASH = 50, /**< ISO USB keyboards actually use this code
                                  *   instead of 49 for the same key, but all
                                  *   OSes I've seen treat the two codes
                                  *   identically. So, as an implementor, unless
                                  *   your keyboard generates both of those
                                  *   codes and your OS treats them differently,
                                  *   you should generate REB_SCANCODE_BACKSLASH
                                  *   instead of this code. As a user, you
                                  *   should not rely on this code because REB
                                  *   will never generate it with most (all?)
                                  *   keyboards.
                                  */
    REB_SCANCODE_SEMICOLON = 51,
    REB_SCANCODE_APOSTROPHE = 52,
    REB_SCANCODE_GRAVE = 53, /**< Located in the top left corner (on both ANSI
                              *   and ISO keyboards). Produces GRAVE ACCENT and
                              *   TILDE in a US Windows layout and in US and UK
                              *   Mac layouts on ANSI keyboards, GRAVE ACCENT
                              *   and NOT SIGN in a UK Windows layout, SECTION
                              *   SIGN and PLUS-MINUS SIGN in US and UK Mac
                              *   layouts on ISO keyboards, SECTION SIGN and
                              *   DEGREE SIGN in a Swiss German layout (Mac:
                              *   only on ISO keyboards), CIRCUMFLEX ACCENT and
                              *   DEGREE SIGN in a German layout (Mac: only on
                              *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a
                              *   French Windows layout, COMMERCIAL AT and
                              *   NUMBER SIGN in a French Mac layout on ISO
                              *   keyboards, and LESS-THAN SIGN and GREATER-THAN
                              *   SIGN in a Swiss German, German, or French Mac
                              *   layout on ANSI keyboards.
                              */
    REB_SCANCODE_COMMA = 54,
    REB_SCANCODE_PERIOD = 55,
    REB_SCANCODE_SLASH = 56,

    REB_SCANCODE_CAPSLOCK = 57,

    REB_SCANCODE_F1 = 58,
    REB_SCANCODE_F2 = 59,
    REB_SCANCODE_F3 = 60,
    REB_SCANCODE_F4 = 61,
    REB_SCANCODE_F5 = 62,
    REB_SCANCODE_F6 = 63,
    REB_SCANCODE_F7 = 64,
    REB_SCANCODE_F8 = 65,
    REB_SCANCODE_F9 = 66,
    REB_SCANCODE_F10 = 67,
    REB_SCANCODE_F11 = 68,
    REB_SCANCODE_F12 = 69,

    REB_SCANCODE_PRINTSCREEN = 70,
    REB_SCANCODE_SCROLLLOCK = 71,
    REB_SCANCODE_PAUSE = 72,
    REB_SCANCODE_INSERT = 73, /**< insert on PC, help on some Mac keyboards (but
                                   does send code 73, not 117) */
    REB_SCANCODE_HOME = 74,
    REB_SCANCODE_PAGEUP = 75,
    REB_SCANCODE_DELETE = 76,
    REB_SCANCODE_END = 77,
    REB_SCANCODE_PAGEDOWN = 78,
    REB_SCANCODE_RIGHT = 79,
    REB_SCANCODE_LEFT = 80,
    REB_SCANCODE_DOWN = 81,
    REB_SCANCODE_UP = 82,

    REB_SCANCODE_NUMLOCKCLEAR = 83, /**< num lock on PC, clear on Mac keyboards
                                     */
    REB_SCANCODE_KP_DIVIDE = 84,
    REB_SCANCODE_KP_MULTIPLY = 85,
    REB_SCANCODE_KP_MINUS = 86,
    REB_SCANCODE_KP_PLUS = 87,
    REB_SCANCODE_KP_ENTER = 88,
    REB_SCANCODE_KP_1 = 89,
    REB_SCANCODE_KP_2 = 90,
    REB_SCANCODE_KP_3 = 91,
    REB_SCANCODE_KP_4 = 92,
    REB_SCANCODE_KP_5 = 93,
    REB_SCANCODE_KP_6 = 94,
    REB_SCANCODE_KP_7 = 95,
    REB_SCANCODE_KP_8 = 96,
    REB_SCANCODE_KP_9 = 97,
    REB_SCANCODE_KP_0 = 98,
    REB_SCANCODE_KP_PERIOD = 99,

    REB_SCANCODE_NONUSBACKSLASH = 100, /**< This is the additional key that ISO
                                        *   keyboards have over ANSI ones,
                                        *   located between left shift and Y.
                                        *   Produces GRAVE ACCENT and TILDE in a
                                        *   US or UK Mac layout, REVERSE SOLIDUS
                                        *   (backslash) and VERTICAL LINE in a
                                        *   US or UK Windows layout, and
                                        *   LESS-THAN SIGN and GREATER-THAN SIGN
                                        *   in a Swiss German, German, or French
                                        *   layout. */
    REB_SCANCODE_APPLICATION = 101, /**< windows contextual menu, compose */
    REB_SCANCODE_POWER = 102, /**< The USB document says this is a status flag,
                               *   not a physical key - but some Mac keyboards
                               *   do have a power key. */
    REB_SCANCODE_KP_EQUALS = 103,
    REB_SCANCODE_F13 = 104,
    REB_SCANCODE_F14 = 105,
    REB_SCANCODE_F15 = 106,
    REB_SCANCODE_F16 = 107,
    REB_SCANCODE_F17 = 108,
    REB_SCANCODE_F18 = 109,
    REB_SCANCODE_F19 = 110,
    REB_SCANCODE_F20 = 111,
    REB_SCANCODE_F21 = 112,
    REB_SCANCODE_F22 = 113,
    REB_SCANCODE_F23 = 114,
    REB_SCANCODE_F24 = 115,
    REB_SCANCODE_EXECUTE = 116,
    REB_SCANCODE_HELP = 117,
    REB_SCANCODE_MENU = 118,
    REB_SCANCODE_SELECT = 119,
    REB_SCANCODE_STOP = 120,
    REB_SCANCODE_AGAIN = 121,   /**< redo */
    REB_SCANCODE_UNDO = 122,
    REB_SCANCODE_CUT = 123,
    REB_SCANCODE_COPY = 124,
    REB_SCANCODE_PASTE = 125,
    REB_SCANCODE_FIND = 126,
    REB_SCANCODE_MUTE = 127,
    REB_SCANCODE_VOLUMEUP = 128,
    REB_SCANCODE_VOLUMEDOWN = 129,
/* not sure whether there's a reason to enable these */
/*     REB_SCANCODE_LOCKINGCAPSLOCK = 130,  */
/*     REB_SCANCODE_LOCKINGNUMLOCK = 131, */
/*     REB_SCANCODE_LOCKINGSCROLLLOCK = 132, */
    REB_SCANCODE_KP_COMMA = 133,
    REB_SCANCODE_KP_EQUALSAS400 = 134,

    REB_SCANCODE_INTERNATIONAL1 = 135, /**< used on Asian keyboards, see
                                            footnotes in USB doc */
    REB_SCANCODE_INTERNATIONAL2 = 136,
    REB_SCANCODE_INTERNATIONAL3 = 137, /**< Yen */
    REB_SCANCODE_INTERNATIONAL4 = 138,
    REB_SCANCODE_INTERNATIONAL5 = 139,
    REB_SCANCODE_INTERNATIONAL6 = 140,
    REB_SCANCODE_INTERNATIONAL7 = 141,
    REB_SCANCODE_INTERNATIONAL8 = 142,
    REB_SCANCODE_INTERNATIONAL9 = 143,
    REB_SCANCODE_LANG1 = 144, /**< Hangul/English toggle */
    REB_SCANCODE_LANG2 = 145, /**< Hanja conversion */
    REB_SCANCODE_LANG3 = 146, /**< Katakana */
    REB_SCANCODE_LANG4 = 147, /**< Hiragana */
    REB_SCANCODE_LANG5 = 148, /**< Zenkaku/Hankaku */
    REB_SCANCODE_LANG6 = 149, /**< reserved */
    REB_SCANCODE_LANG7 = 150, /**< reserved */
    REB_SCANCODE_LANG8 = 151, /**< reserved */
    REB_SCANCODE_LANG9 = 152, /**< reserved */

    REB_SCANCODE_ALTERASE = 153, /**< Erase-Eaze */
    REB_SCANCODE_SYSREQ = 154,
    REB_SCANCODE_CANCEL = 155,
    REB_SCANCODE_CLEAR = 156,
    REB_SCANCODE_PRIOR = 157,
    REB_SCANCODE_RETURN2 = 158,
    REB_SCANCODE_SEPARATOR = 159,
    REB_SCANCODE_OUT = 160,
    REB_SCANCODE_OPER = 161,
    REB_SCANCODE_CLEARAGAIN = 162,
    REB_SCANCODE_CRSEL = 163,
    REB_SCANCODE_EXSEL = 164,

    REB_SCANCODE_KP_00 = 176,
    REB_SCANCODE_KP_000 = 177,
    REB_SCANCODE_THOUSANDSSEPARATOR = 178,
    REB_SCANCODE_DECIMALSEPARATOR = 179,
    REB_SCANCODE_CURRENCYUNIT = 180,
    REB_SCANCODE_CURRENCYSUBUNIT = 181,
    REB_SCANCODE_KP_LEFTPAREN = 182,
    REB_SCANCODE_KP_RIGHTPAREN = 183,
    REB_SCANCODE_KP_LEFTBRACE = 184,
    REB_SCANCODE_KP_RIGHTBRACE = 185,
    REB_SCANCODE_KP_TAB = 186,
    REB_SCANCODE_KP_BACKSPACE = 187,
    REB_SCANCODE_KP_A = 188,
    REB_SCANCODE_KP_B = 189,
    REB_SCANCODE_KP_C = 190,
    REB_SCANCODE_KP_D = 191,
    REB_SCANCODE_KP_E = 192,
    REB_SCANCODE_KP_F = 193,
    REB_SCANCODE_KP_XOR = 194,
    REB_SCANCODE_KP_POWER = 195,
    REB_SCANCODE_KP_PERCENT = 196,
    REB_SCANCODE_KP_LESS = 197,
    REB_SCANCODE_KP_GREATER = 198,
    REB_SCANCODE_KP_AMPERSAND = 199,
    REB_SCANCODE_KP_DBLAMPERSAND = 200,
    REB_SCANCODE_KP_VERTICALBAR = 201,
    REB_SCANCODE_KP_DBLVERTICALBAR = 202,
    REB_SCANCODE_KP_COLON = 203,
    REB_SCANCODE_KP_HASH = 204,
    REB_SCANCODE_KP_SPACE = 205,
    REB_SCANCODE_KP_AT = 206,
    REB_SCANCODE_KP_EXCLAM = 207,
    REB_SCANCODE_KP_MEMSTORE = 208,
    REB_SCANCODE_KP_MEMRECALL = 209,
    REB_SCANCODE_KP_MEMCLEAR = 210,
    REB_SCANCODE_KP_MEMADD = 211,
    REB_SCANCODE_KP_MEMSUBTRACT = 212,
    REB_SCANCODE_KP_MEMMULTIPLY = 213,
    REB_SCANCODE_KP_MEMDIVIDE = 214,
    REB_SCANCODE_KP_PLUSMINUS = 215,
    REB_SCANCODE_KP_CLEAR = 216,
    REB_SCANCODE_KP_CLEARENTRY = 217,
    REB_SCANCODE_KP_BINARY = 218,
    REB_SCANCODE_KP_OCTAL = 219,
    REB_SCANCODE_KP_DECIMAL = 220,
    REB_SCANCODE_KP_HEXADECIMAL = 221,

    REB_SCANCODE_LCTRL = 224,
    REB_SCANCODE_LSHIFT = 225,
    REB_SCANCODE_LALT = 226, /**< alt, option */
    REB_SCANCODE_LGUI = 227, /**< windows, command (apple), meta */
    REB_SCANCODE_RCTRL = 228,
    REB_SCANCODE_RSHIFT = 229,
    REB_SCANCODE_RALT = 230, /**< alt gr, option */
    REB_SCANCODE_RGUI = 231, /**< windows, command (apple), meta */

    REB_SCANCODE_MODE = 257,    /**< I'm not sure if this is really not covered
                                 *   by any of the above, but since there's a
                                 *   special REBKMOD_MODE for it I'm adding it here
                                 */

    /*@}*//*Usage page 0x07*/

    /**
     *  \name Usage page 0x0C
     *
     *  These values are mapped from usage page 0x0C (USB consumer page).
     */
    /*@{*/

    REB_SCANCODE_AUDIONEXT = 258,
    REB_SCANCODE_AUDIOPREV = 259,
    REB_SCANCODE_AUDIOSTOP = 260,
    REB_SCANCODE_AUDIOPLAY = 261,
    REB_SCANCODE_AUDIOMUTE = 262,
    REB_SCANCODE_MEDIASELECT = 263,
    REB_SCANCODE_WWW = 264,
    REB_SCANCODE_MAIL = 265,
    REB_SCANCODE_CALCULATOR = 266,
    REB_SCANCODE_COMPUTER = 267,
    REB_SCANCODE_AC_SEARCH = 268,
    REB_SCANCODE_AC_HOME = 269,
    REB_SCANCODE_AC_BACK = 270,
    REB_SCANCODE_AC_FORWARD = 271,
    REB_SCANCODE_AC_STOP = 272,
    REB_SCANCODE_AC_REFRESH = 273,
    REB_SCANCODE_AC_BOOKMARKS = 274,

    /*@}*//*Usage page 0x0C*/

    /**
     *  \name Walther keys
     *
     *  These are values that Christian Walther added (for mac keyboard?).
     */
    /*@{*/

    REB_SCANCODE_BRIGHTNESSDOWN = 275,
    REB_SCANCODE_BRIGHTNESSUP = 276,
    REB_SCANCODE_DISPLAYSWITCH = 277, /**< display mirroring/dual display
                                           switch, video mode switch */
    REB_SCANCODE_KBDILLUMTOGGLE = 278,
    REB_SCANCODE_KBDILLUMDOWN = 279,
    REB_SCANCODE_KBDILLUMUP = 280,
    REB_SCANCODE_EJECT = 281,
    REB_SCANCODE_SLEEP = 282,

    REB_SCANCODE_APP1 = 283,
    REB_SCANCODE_APP2 = 284,

    /*@}*//*Walther keys*/

    /* Add any other keys here. */

    REB_NUM_SCANCODES = 512 /**< not a key, just marks the number of scancodes
                                 for array bounds */
};


typedef int REB_Keycode;

#define REBK_SCANCODE_MASK (1<<30)
#define REB_SCANCODE_TO_KEYCODE(X)  (X | REBK_SCANCODE_MASK)

enum
{
    REBK_UNKNOWN = 0,

    REBK_RETURN = '\r',
    REBK_ESCAPE = '\033',
    REBK_BACKSPACE = '\b',
    REBK_TAB = '\t',
    REBK_SPACE = ' ',
    REBK_EXCLAIM = '!',
    REBK_QUOTEDBL = '"',
    REBK_HASH = '#',
    REBK_PERCENT = '%',
    REBK_DOLLAR = '$',
    REBK_AMPERSAND = '&',
    REBK_QUOTE = '\'',
    REBK_LEFTPAREN = '(',
    REBK_RIGHTPAREN = ')',
    REBK_ASTERISK = '*',
    REBK_PLUS = '+',
    REBK_COMMA = ',',
    REBK_MINUS = '-',
    REBK_PERIOD = '.',
    REBK_SLASH = '/',
    REBK_0 = '0',
    REBK_1 = '1',
    REBK_2 = '2',
    REBK_3 = '3',
    REBK_4 = '4',
    REBK_5 = '5',
    REBK_6 = '6',
    REBK_7 = '7',
    REBK_8 = '8',
    REBK_9 = '9',
    REBK_COLON = ':',
    REBK_SEMICOLON = ';',
    REBK_LESS = '<',
    REBK_EQUALS = '=',
    REBK_GREATER = '>',
    REBK_QUESTION = '?',
    REBK_AT = '@',
    /*
       Skip uppercase letters
     */
    REBK_LEFTBRACKET = '[',
    REBK_BACKSLASH = '\\',
    REBK_RIGHTBRACKET = ']',
    REBK_CARET = '^',
    REBK_UNDERSCORE = '_',
    REBK_BACKQUOTE = '`',
    REBK_a = 'a',
    REBK_b = 'b',
    REBK_c = 'c',
    REBK_d = 'd',
    REBK_e = 'e',
    REBK_f = 'f',
    REBK_g = 'g',
    REBK_h = 'h',
    REBK_i = 'i',
    REBK_j = 'j',
    REBK_k = 'k',
    REBK_l = 'l',
    REBK_m = 'm',
    REBK_n = 'n',
    REBK_o = 'o',
    REBK_p = 'p',
    REBK_q = 'q',
    REBK_r = 'r',
    REBK_s = 's',
    REBK_t = 't',
    REBK_u = 'u',
    REBK_v = 'v',
    REBK_w = 'w',
    REBK_x = 'x',
    REBK_y = 'y',
    REBK_z = 'z',

    REBK_CAPSLOCK = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CAPSLOCK),

    REBK_F1 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F1),
    REBK_F2 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F2),
    REBK_F3 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F3),
    REBK_F4 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F4),
    REBK_F5 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F5),
    REBK_F6 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F6),
    REBK_F7 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F7),
    REBK_F8 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F8),
    REBK_F9 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F9),
    REBK_F10 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F10),
    REBK_F11 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F11),
    REBK_F12 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F12),

    REBK_PRINTSCREEN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_PRINTSCREEN),
    REBK_SCROLLLOCK = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_SCROLLLOCK),
    REBK_PAUSE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_PAUSE),
    REBK_INSERT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_INSERT),
    REBK_HOME = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_HOME),
    REBK_PAGEUP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_PAGEUP),
    REBK_DELETE = '\177',
    REBK_END = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_END),
    REBK_PAGEDOWN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_PAGEDOWN),
    REBK_RIGHT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_RIGHT),
    REBK_LEFT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_LEFT),
    REBK_DOWN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_DOWN),
    REBK_UP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_UP),

    REBK_NUMLOCKCLEAR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_NUMLOCKCLEAR),
    REBK_KP_DIVIDE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_DIVIDE),
    REBK_KP_MULTIPLY = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MULTIPLY),
    REBK_KP_MINUS = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MINUS),
    REBK_KP_PLUS = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_PLUS),
    REBK_KP_ENTER = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_ENTER),
    REBK_KP_1 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_1),
    REBK_KP_2 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_2),
    REBK_KP_3 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_3),
    REBK_KP_4 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_4),
    REBK_KP_5 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_5),
    REBK_KP_6 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_6),
    REBK_KP_7 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_7),
    REBK_KP_8 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_8),
    REBK_KP_9 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_9),
    REBK_KP_0 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_0),
    REBK_KP_PERIOD = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_PERIOD),

    REBK_APPLICATION = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_APPLICATION),
    REBK_POWER = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_POWER),
    REBK_KP_EQUALS = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_EQUALS),
    REBK_F13 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F13),
    REBK_F14 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F14),
    REBK_F15 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F15),
    REBK_F16 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F16),
    REBK_F17 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F17),
    REBK_F18 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F18),
    REBK_F19 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F19),
    REBK_F20 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F20),
    REBK_F21 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F21),
    REBK_F22 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F22),
    REBK_F23 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F23),
    REBK_F24 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_F24),
    REBK_EXECUTE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_EXECUTE),
    REBK_HELP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_HELP),
    REBK_MENU = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_MENU),
    REBK_SELECT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_SELECT),
    REBK_STOP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_STOP),
    REBK_AGAIN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AGAIN),
    REBK_UNDO = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_UNDO),
    REBK_CUT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CUT),
    REBK_COPY = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_COPY),
    REBK_PASTE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_PASTE),
    REBK_FIND = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_FIND),
    REBK_MUTE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_MUTE),
    REBK_VOLUMEUP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_VOLUMEUP),
    REBK_VOLUMEDOWN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_VOLUMEDOWN),
    REBK_KP_COMMA = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_COMMA),
    REBK_KP_EQUALSAS400 =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_EQUALSAS400),

    REBK_ALTERASE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_ALTERASE),
    REBK_SYSREQ = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_SYSREQ),
    REBK_CANCEL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CANCEL),
    REBK_CLEAR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CLEAR),
    REBK_PRIOR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_PRIOR),
    REBK_RETURN2 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_RETURN2),
    REBK_SEPARATOR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_SEPARATOR),
    REBK_OUT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_OUT),
    REBK_OPER = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_OPER),
    REBK_CLEARAGAIN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CLEARAGAIN),
    REBK_CRSEL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CRSEL),
    REBK_EXSEL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_EXSEL),

    REBK_KP_00 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_00),
    REBK_KP_000 = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_000),
    REBK_THOUSANDSSEPARATOR =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_THOUSANDSSEPARATOR),
    REBK_DECIMALSEPARATOR =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_DECIMALSEPARATOR),
    REBK_CURRENCYUNIT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CURRENCYUNIT),
    REBK_CURRENCYSUBUNIT =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CURRENCYSUBUNIT),
    REBK_KP_LEFTPAREN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_LEFTPAREN),
    REBK_KP_RIGHTPAREN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_RIGHTPAREN),
    REBK_KP_LEFTBRACE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_LEFTBRACE),
    REBK_KP_RIGHTBRACE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_RIGHTBRACE),
    REBK_KP_TAB = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_TAB),
    REBK_KP_BACKSPACE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_BACKSPACE),
    REBK_KP_A = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_A),
    REBK_KP_B = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_B),
    REBK_KP_C = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_C),
    REBK_KP_D = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_D),
    REBK_KP_E = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_E),
    REBK_KP_F = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_F),
    REBK_KP_XOR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_XOR),
    REBK_KP_POWER = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_POWER),
    REBK_KP_PERCENT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_PERCENT),
    REBK_KP_LESS = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_LESS),
    REBK_KP_GREATER = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_GREATER),
    REBK_KP_AMPERSAND = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_AMPERSAND),
    REBK_KP_DBLAMPERSAND =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_DBLAMPERSAND),
    REBK_KP_VERTICALBAR =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_VERTICALBAR),
    REBK_KP_DBLVERTICALBAR =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_DBLVERTICALBAR),
    REBK_KP_COLON = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_COLON),
    REBK_KP_HASH = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_HASH),
    REBK_KP_SPACE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_SPACE),
    REBK_KP_AT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_AT),
    REBK_KP_EXCLAM = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_EXCLAM),
    REBK_KP_MEMSTORE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMSTORE),
    REBK_KP_MEMRECALL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMRECALL),
    REBK_KP_MEMCLEAR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMCLEAR),
    REBK_KP_MEMADD = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMADD),
    REBK_KP_MEMSUBTRACT =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMSUBTRACT),
    REBK_KP_MEMMULTIPLY =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMMULTIPLY),
    REBK_KP_MEMDIVIDE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_MEMDIVIDE),
    REBK_KP_PLUSMINUS = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_PLUSMINUS),
    REBK_KP_CLEAR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_CLEAR),
    REBK_KP_CLEARENTRY = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_CLEARENTRY),
    REBK_KP_BINARY = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_BINARY),
    REBK_KP_OCTAL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_OCTAL),
    REBK_KP_DECIMAL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_DECIMAL),
    REBK_KP_HEXADECIMAL =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KP_HEXADECIMAL),

    REBK_LCTRL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_LCTRL),
    REBK_LSHIFT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_LSHIFT),
    REBK_LALT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_LALT),
    REBK_LGUI = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_LGUI),
    REBK_RCTRL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_RCTRL),
    REBK_RSHIFT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_RSHIFT),
    REBK_RALT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_RALT),
    REBK_RGUI = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_RGUI),

    REBK_MODE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_MODE),

    REBK_AUDIONEXT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AUDIONEXT),
    REBK_AUDIOPREV = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AUDIOPREV),
    REBK_AUDIOSTOP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AUDIOSTOP),
    REBK_AUDIOPLAY = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AUDIOPLAY),
    REBK_AUDIOMUTE = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AUDIOMUTE),
    REBK_MEDIASELECT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_MEDIASELECT),
    REBK_WWW = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_WWW),
    REBK_MAIL = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_MAIL),
    REBK_CALCULATOR = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_CALCULATOR),
    REBK_COMPUTER = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_COMPUTER),
    REBK_AC_SEARCH = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_SEARCH),
    REBK_AC_HOME = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_HOME),
    REBK_AC_BACK = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_BACK),
    REBK_AC_FORWARD = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_FORWARD),
    REBK_AC_STOP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_STOP),
    REBK_AC_REFRESH = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_REFRESH),
    REBK_AC_BOOKMARKS = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_AC_BOOKMARKS),

    REBK_BRIGHTNESSDOWN =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_BRIGHTNESSDOWN),
    REBK_BRIGHTNESSUP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_BRIGHTNESSUP),
    REBK_DISPLAYSWITCH = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_DISPLAYSWITCH),
    REBK_KBDILLUMTOGGLE =
        REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KBDILLUMTOGGLE),
    REBK_KBDILLUMDOWN = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KBDILLUMDOWN),
    REBK_KBDILLUMUP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_KBDILLUMUP),
    REBK_EJECT = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_EJECT),
    REBK_SLEEP = REB_SCANCODE_TO_KEYCODE(REB_SCANCODE_SLEEP)
};

/**
 * \brief Enumeration of valid key mods (possibly OR'd together).
 */
typedef enum
{
    REBKMOD_NONE = 0x0000,
    REBKMOD_LSHIFT = 0x0001,
    REBKMOD_RSHIFT = 0x0002,
    REBKMOD_LCTRL = 0x0040,
    REBKMOD_RCTRL = 0x0080,
    REBKMOD_LALT = 0x0100,
    REBKMOD_RALT = 0x0200,
    REBKMOD_LGUI = 0x0400,
    REBKMOD_RGUI = 0x0800,
    REBKMOD_NUM = 0x1000,
    REBKMOD_CAPS = 0x2000,
    REBKMOD_MODE = 0x4000,
    REBKMOD_RESERVED = 0x8000
} Keymod;

#define REBKMOD_CTRL   (REBKMOD_LCTRL|REBKMOD_RCTRL)
#define REBKMOD_SHIFT  (REBKMOD_LSHIFT|REBKMOD_RSHIFT)
#define REBKMOD_ALT    (REBKMOD_LALT|REBKMOD_RALT)
#define REBKMOD_GUI    (REBKMOD_LGUI|REBKMOD_RGUI)

typedef unsigned __int8 REB_Scancode;

typedef unsigned __int16 REB_KeyMod;

struct RebKey
{
	REB_Scancode scancode;      
    REB_Keycode sym;            
    REB_KeyMod mod;                 
    unsigned int unused;
};



#endif